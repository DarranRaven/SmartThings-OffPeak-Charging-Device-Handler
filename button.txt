import groovy.json.JsonOutput

metadata {
	definition (name: "On/Off Button Tile", namespace: "smartthings", author: "SmartThings") {
		capability "Actuator"
		capability "Switch"
		capability "Sensor"
	}

	// simulator metadata
	simulator {
	}

	// UI tile definitions
	tiles {
		standardTile("button", "device.switch", width: 2, height: 2, canChangeIcon: true) {
			state "off", label: 'Off', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState: "on"
			state "on", label: 'On', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#79b821", nextState: "off"
		}
		main "button"
		details "button"
	}
}

def parse(String description) {
}

def on() {
    UpdateChargeState(true)
    log.debug "on"
	sendEvent(name: "switch", value: "on")
}

def off() {
	UpdateChargeState(false)
	log.debug "off"
	sendEvent(name: "switch", value: "off")
}

void UpdateChargeState(boolean enableOffPeakCharging){
	httpPost(accessTokenMap()){ accessTokenResponse -> 
    	String accessToken = accessTokenResponse.data.access_token
        httpGet(VehichesMap(accessTokenResponse.data.access_token)){ vehiclesResponse ->
        	String vin = vehiclesResponse.data.vehicles[0].vin
        	httpGet(ChargingProfile(accessToken, vin)){ chargingResponse ->
            	Map updateData = [
                	weeklyPlanner: [
                    	mChargingProfileType: 'WEEKLY_PLANNER_TIMER',
                        climatizationEnabled: chargingResponse.data.weeklyPlanner.climatizationEnabled,
                    	overrideTimer: [timerEnabled: chargingResponse.data.weeklyPlanner.overrideTimer.timerEnabled, weekdays: chargingResponse.data.weeklyPlanner.overrideTimer.weekdays],
                        preferredChargingWindow: chargingResponse.data.weeklyPlanner.preferredChargingWindow,                        
                        timer1: chargingResponse.data.weeklyPlanner.timer1,
                        timer2: chargingResponse.data.weeklyPlanner.timer2,
                        timer3: chargingResponse.data.weeklyPlanner.timer3,
                        timer: [chargingResponse.data.weeklyPlanner.timer1, chargingResponse.data.weeklyPlanner.timer2, chargingResponse.data.weeklyPlanner.timer3]
                    ]
                ]
                
                updateData.weeklyPlanner.preferredChargingWindow.enabled = enableOffPeakCharging

                httpPost(UpdateChargingProfileMap(accessToken, vin, updateData)) { updateResponse ->
                    log.debug updateResponse.data;
                }

           }
		}
    }
}

Map accessTokenMap(){
	String token = "<<AuthorisationToken>>"
    String username = "<<Username>>"
    String password = "<<Password>>"
	return [
    	uri: 'https://b2vapi.bmwgroup.com',
        path: '/webapi/oauth/token/',
        headers: [Authorization: 'Basic ' + token],
        body: 'grant_type=password&username=' + username + '&password=' + password + '&scope=vehicle_data remote_services',
        contentType: 'application/json',
        requestContentType: 'application/x-www-form-urlencoded'
    ]
}

Map UpdateChargingProfileMap(token, vin, data){
	return [
    	uri: 'https://b2vapi.bmwgroup.com',
        path: '/webapi/v1/user/vehicles/' + vin + '/executeService',
        headers: [Authorization: 'Bearer ' + token],
        body: [serviceType: 'CHARGING_CONTROL', data: JsonOutput.toJson(data)],
        requestContentType: 'application/x-www-form-urlencoded'
    ]
}

Map VehichesMap(token){
	return [
    	uri: 'https://b2vapi.bmwgroup.com',
        path: '/webapi/v1/user/vehicles/',
        headers: [Authorization: 'Bearer ' + token],
        contentType: 'application/json'
    ]
}

Map ChargingProfile(token, vin){
	return [
    	uri: 'https://b2vapi.bmwgroup.com',
        path: '/webapi/v1/user/vehicles/' + vin + '/chargingprofile',
        headers: [Authorization: 'Bearer ' + token],
        contentType: 'application/json'
    ]
}
